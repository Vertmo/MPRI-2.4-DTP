--- 03-total/Recursion.student	2019-02-15 10:56:04.825648220 +0100
+++ 03-total/Recursion.lagda.rst.orig	2019-02-15 10:55:45.418079151 +0100
@@ -175,8 +175,6 @@
 consider::
 
     data Subst : Set where
-      id : Subst
-      _∷[_/_] : (σ : Subst)(t : Term)(i : Var) → Subst
 
 In turn, we interpret this initial model in the target
 one. Substituting a single term ``t : Term`` for a variable ``i : Var``
@@ -302,9 +300,9 @@
 We can thus represent *terms with (at most) ``n`` variables*::
 
     data Term (n : ℕ) : Set where
-      var : (i : Var n) → Term n
-      leaf : Term n
-      fork : (s t : Term n) → Term n
+      var : (i : Var ?) → Term ?
+      leaf : Term ?
+      fork : (s t : Term ?) → Term ?
 
 **Exercise (difficulty: 1)** Once again, we can implement
 substitution::
@@ -451,8 +449,8 @@
 Iteratively, a substitution counts the upper-bound of variables::
 
     data Subst : ℕ → ℕ → Set where
-      id : ∀ {n} → Subst n n
-      _∷[_/_] : ∀ {m n} → (σ : Subst m n)(t' : Term m)(x : Var (suc m)) → Subst (suc m) n
+      id : ∀ {n} → Subst ? ?
+      _∷[_/_] : ∀ {m n} → (σ : Subst ? ?)(t' : Term ?)(x : Var ?) → Subst ? ?
 
     ⟦_⟧ : ∀ {m n} → Subst m n → (Var m → Term n)
     ⟦ ρ ⟧ = {!!}
@@ -481,7 +479,7 @@
 substitution (case ``amgu {suc k} _ _ (m , (σ ∷[ r / z ]))``), the
 next call to ``amgu`` will be on terms with ``k < suc k``
 variables. It is therefore definable by structural recursion and Agda
-is able to spot it::
+is able to spot it:
 
     flex-flex : ∀ {m} → (x y : Var m) → ∃ (Subst m)
     flex-rigid : ∀ {m} → (x : Var m)(t : Term m) → Maybe (∃ (Subst m))
@@ -1034,8 +1032,8 @@
     gcd (0  , n)     = return n
     gcd (m , 0)      = return m
     gcd (suc m , suc n) with m ≤? n
-    ... | yes _ = call⟨ suc m , n ∸ m ⟩
-    ... | no  _ = call⟨ m ∸ n , suc n ⟩
+    ... | yes _ = ?
+    ... | no  _ = ?
 
 ..
   ::
@@ -1227,8 +1225,8 @@
 "prove" this, we simply describe it with a collapsible description::
 
     dom : ∀{a} → RecMon (B a) → CDesc A
-    dom (return z) = `1
-    dom (call a rec) = `X a `× `Π (B a) λ b → dom (rec b)
+    dom (return z) = ?
+    dom (call a rec) = ?
 
     Dom : CFunc A
     Dom = CFunc.mk λ a → dom (f a)
@@ -1236,7 +1234,7 @@
 
 Then, following the Bove-Capretta technique, we can run the
 (potentially general-recursive) function ``f`` by recursion over its
-call-graph (and, therefore, not over its arguments)::
+call-graph (and, therefore, not over its arguments):
 
     run : (a : A) → μ Dom a → B a
     run1 : ∀{a} → (p : RecMon (B a)) → ⟦ dom p ⟧ B → B a
